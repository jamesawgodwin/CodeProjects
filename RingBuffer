class MyCircularQueue:

    def __init__(self, k):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        :type k: int
        """
        self.size = k
        self.data = [None]*k
        self.head = -1
        self.tail = -1
        

    def enQueue(self, value):
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """
        if self.isEmpty(): #First state: queue is empty, move head and tail pointers
            self.data[0] = value
            self.head = 0
            self.tail = 0
            return True
        elif self.isFull(): #Second state: queue is full, return F
            return False
        else: #Third state: normal, increment tail pointer, return T
            self.tail = (self.tail + 1) % self.size
            self.data[self.tail] = value
            return True
        
    def deQueue(self):
            
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        :rtype: bool
        """
        if self.isEmpty(): #First state: queue is empty
            return False
        else: 
            self.data[self.head] = None
            
            if self.head == self.tail: #queue is Empty, reset head and tail
                self.head = -1
                self.tail = -1
            else: #move head
                self.head = (self.head + 1) % self.size
                return True
            
            
    def Front(self):
        """
        Get the front item from the queue.
        :rtype: int
        """
        return -1 if self.isEmpty() else self.data[self.head]

    def Rear(self):
        """
        Get the last item from the queue.
        :rtype: int
        """
        return -1 if self.isEmpty() else self.data[self.tail]

    def isEmpty(self):
        """
        Checks whether the circular queue is empty or not.
        :rtype: bool
        """
       # return False if self.data[self.tail] = -1 else True
        return self.tail == -1
    

    def isFull(self):
        """
        Checks whether the circular queue is full or not.
        :rtype: bool
        """
        return self.head == (self.tail + 1) % self.size


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
